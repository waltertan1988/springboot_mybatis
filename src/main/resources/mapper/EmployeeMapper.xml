<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.walter.mapper.EmployeeMapperByXml">

    <resultMap id="employeeResultMap" type="com.walter.domain.Employee">
        <!--通过resultMap定义封装规则，因此可以无须开启驼峰命名转换的设置-->
        <id column="id" property="id"/>
        <result column="user_real_name" property="userRealName"/>
        <!--column可以自动封装，不用指定-->
    </resultMap>

    <resultMap id="employeeWithDepartmentResultMap" type="com.walter.domain.Employee">
        <id column="eid" property="id"/>
        <result column="dept_id" property="department.id"/>
        <result column="dept_code" property="department.code"/>
        <result column="dept_name" property="department.name"/>
        <!-- 使用association标签，等价于使用上面的关联属性
        <association property="department" javaType="com.walter.domain.Department">
            <id column="dept_id" property="id"/>
            <result column="dept_code" property="code"/>
            <result column="dept_name" property="name"/>
        </association>
        -->
    </resultMap>

    <resultMap id="employeeWithDepartmentResultMapBy2Steps" type="com.walter.domain.Employee">
        <id column="eid" property="id"/>
        <!--使用association的分步查询(可以使用延迟加载特性)， select="<子对象mapper命名空间>.<mapperid>",
            column：指定关联查询列(通过{k1=v1,k2=v2...}传入多个值)
            fetchType：指定延迟加载还是立即加载
        -->
        <association property="department" select="com.walter.mapper.DepartmentMapperByXml.getDepartmentByCode"
                     column="{code=dept_code}" fetchType="lazy"/>
    </resultMap>

    <select id="getEmployeeByUsernameUsingResultMap" resultMap="employeeResultMap">
        select * from EMPLOYEE where username = #{xxx}
    </select>

    <select id="getEmployeeById" resultType="com.walter.domain.Employee">
        select * from EMPLOYEE where id = #{xxx}
    </select>

    <select id="getEmployeeByUsername" resultType="employee" databaseId="mysql">
        select * from EMPLOYEE where username = #{xyz}
    </select>

    <!--<insert id="addOne" parameterType="com.walter.domain.Employee">  parameterType可省略-->
    <insert id="addOne" useGeneratedKeys="true" keyProperty="id" databaseId="mysql">
        <!--useGeneratedKeys结合keyProperty，让主键自增值自动回填到Employee对象id属性。（注：自增不适用于Oracle）-->
        insert into EMPLOYEE(username, user_real_name, gender, email)
        values (#{username}, #{userRealName}, #{gender}, #{email})
    </insert>

    <insert id="addOne" databaseId="oracle">
        <!--selectKey，让主键序列值自动回填到Employee对象id属性。（注：适用于Oracle）-->
        <selectKey keyProperty="id" order="BEFORE" resultType="Integer">
            select SEQ_EMPLOYEE_ID.nextval from dual
        </selectKey>
        insert into EMPLOYEE(id, username, user_real_name, gender, email)
        values (#{id}, #{username}, #{userRealName}, #{gender}, #{email})

        <!-- 上面等价于下面的写法
        <selectKey keyProperty="id" order="AFTER" resultType="Integer">
            select SEQ_EMPLOYEE_ID.currval from dual
        </selectKey>
        insert into EMPLOYEE(id, username, user_real_name, gender, email)
        values (SEQ_EMPLOYEE_ID.nextval, #{username}, #{userRealName}, #{gender}, #{email})
        -->
    </insert>

    <update id="updateOneByUsername">
        update EMPLOYEE set
            user_real_name = #{userRealName},
            gender = #{gender},
            email = #{email}
        where username = #{username}
    </update>

    <delete id="deleteOneByUsername">
        delete from EMPLOYEE where username = #{username}
    </delete>

    <select id="isIdMatchUsername" resultType="Boolean">
        select count(1) from EMPLOYEE where id = #{id} and username = #{username}
    </select>

    <select id="findByUserRealName" resultType="com.walter.domain.Employee">
        select * from EMPLOYEE where user_real_name like #{userRealName}
    </select>

    <select id="getEmployeeMapByUsername" resultType="map">
        select * from EMPLOYEE where username = #{xxx}
    </select>

    <select id="mapUsernameToEmployeeByUserRealName" resultType="map">
        select * from EMPLOYEE where user_real_name like #{xxx}
    </select>

    <select id="findWithDepartmentByUserRealNameUsingResultMap" resultMap="employeeWithDepartmentResultMap">
        SELECT
            e.id eid,
            e.username,
            e.user_real_name,
            e.gender,
            e.email,
            e.dept_code,
            d.id dept_id,
            d.name dept_name
        FROM employee e, department d
        WHERE e.dept_code = d.code
        AND user_real_name like #{xxx}
    </select>

    <select id="findWithDepartmentByUserRealNameUsingResultMapBy2Steps" resultMap="employeeWithDepartmentResultMapBy2Steps">
        SELECT
            e.id eid,
            e.username,
            e.user_real_name,
            e.gender,
            e.email,
            e.dept_code,
            d.id dept_id,
            d.name dept_name
        FROM employee e, department d
        WHERE e.dept_code = d.code
        AND user_real_name like #{xxx}
    </select>

    <select id="findByDepartmentCode" resultType="com.walter.domain.Employee">
        select * from EMPLOYEE where dept_code = #{xxx}
    </select>

    <select id="findByConditionIf" resultType="com.walter.domain.Employee">
        select * from EMPLOYEE
        where 1=1
        <if test="id != null">
            and id = #{id}
        </if>
        <if test="username != null and username.trim() !=''">
            and username = #{username}
        </if>
        <if test="userRealName != null &amp;&amp; userRealName.trim() != &quot;&quot;">
            <bind name="patternUserRealName" value="'%' + userRealName + '%'"/>
            and user_real_name like #{patternUserRealName}
        </if>
        <if test="gender =='M' or gender == 'F'">
            and gender = #{gender}
        </if>
        <if test="email != null and email.trim() !=''">
            and email = #{email}
        </if>
    </select>

    <select id="findByConditionChoose" resultType="com.walter.domain.Employee">
        select * from EMPLOYEE
        <where><!--<where>能自动判别并去掉where子句中的第一个and/or-->
            <choose>
                <when test="id != null">
                    id = #{id}
                </when>
                <when test="username != null and username.trim() != ''">
                    username = #{username}
                </when>
                <otherwise>
                    1 = 1
                </otherwise>
            </choose>
        </where>
    </select>
</mapper>